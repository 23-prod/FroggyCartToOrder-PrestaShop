<?php
/*
* 2013-2014 Froggy Commerce
*
* NOTICE OF LICENSE
*
* You should have received a licence with this module.
* If you didn't buy this module on Froggy-Commerce.com, ThemeForest.net
* or Addons.PrestaShop.com, please contact us immediately : contact@froggy-commerce.com
*
* DISCLAIMER
*
* Do not edit or add to this file if you wish to benefit the updates
* for newer PrestaShop versions in the future. If you wish to customize PrestaShop for your
* needs please refer to http://www.prestashop.com for more information.
*
*  @author Froggy Commerce <contact@froggy-commerce.com>
*  @copyright  2013-2014 Froggy Commerce
*/

// Security
defined('_PS_VERSION_') || require dirname(__FILE__).'/index.php';

// Include Froggy Library
if (!class_exists('FroggyModule', false)) require_once __DIR__.'/froggy/FroggyModule.php';
require_once __DIR__.'/classes/FroggyCartOrderObject.php';

class FroggyCartOrder extends FroggyModule
{
	/**
	 * Constructor
	 */
	public function __construct()
	{
		parent::__construct();

		$this->display_cart_limit = 50;
		$this->displayName = $this->l('Froggy Cart to Order');
		$this->description = $this->l('Allow you to convert a cart into order');
	}

	public function getContent()
	{
		$this->getCartByEmailAjax();
		$convert_result = $this->convertCart();

		$assign = array(
			'module_dir' => $this->_path,
			'cart_limit' => $this->display_cart_limit,
			'last_carts' => $this->getLastCartsNotAssociatedToOrder($this->display_cart_limit),
			'available_payment_methods' => $this->getAvailablePaymentMethods(),
			'order_state_list' => OrderState::getOrderStates(Context::getContext()->language->id),
			'convert_result' => $convert_result,
			'current_url' => Tools::htmlentitiesUTF8($_SERVER['REQUEST_URI']),
		);

		$this->smarty->assign($this->name, $assign);
		return $this->fcdisplay(__FILE__, 'getcontent.tpl');
	}

	public function getCartByEmailAjax()
	{
		if (Tools::getValue('ajax_mode') == '' || Tools::getValue('get_cart_by_email') == '')
			return false;

		$carts_list = $this->getLastCartsNotAssociatedToOrder($this->display_cart_limit, Tools::getValue('get_cart_by_email'));
		die(json_encode($carts_list));
	}

	public function convertCart()
	{
		// Retrieve cart id, manual cart id is prioritary
		$id_cart = Tools::getValue('id_cart_manual');
		if ($id_cart < 1)
			$id_cart = Tools::getValue('id_cart');

		// Retrieve payment methods, manual payment is prioritary
		$payment_method = Tools::getValue('payment_method_manual');
		if ($payment_method == '')
			$payment_method = Tools::getValue('payment_method');

		// Retrieve order state
		$id_order_state = Tools::getValue('id_order_state');

		// If no cart id is selected, we stop
		if ($id_cart < 1 || $payment_method == '' || $id_order_state < 1)
			return '';

		// Context
		$context = Context::getContext();
		$context->cart = new Cart($id_cart);
		$context->currency = new Currency((int)$context->cart->id_currency);
		$context->customer = new Customer((int)$context->cart->id_customer);
		$amount_paid = $context->cart->getOrderTotal();

		// Load payment class
		$payment_module = new FroggyCartOrderPaymentModule();
		$payment_module->name = 'froggycartorderpaymentmodule';
		$result = $payment_module->validateOrder($id_cart, $id_order_state, $amount_paid, $payment_method, $this->l('Order generated by Froggy Cart to Order'), array(), $context->currency->id, false, $context->cart->secure_key);
		if ($result)
		{
			$fco = new FroggyCartOrderObject();
			$fco->id_customer = $context->cart->id_customer;
			$fco->id_order = OrderCore::getOrderByCartId($id_cart);
			$fco->id_employee = $context->cookie->id_employee;
			$fco->payment = $payment_method;
			$fco->add();
			return 'OK';
		}
		return 'KO';
	}

	public function getLastCartsNotAssociatedToOrder($limit = 50, $email = '')
	{
		$carts_list = Db::getInstance()->executeS('
		SELECT a.*, CONCAT(c.`firstname`, \' \', c.`lastname`) `customer`,
			   ca.name carrier, o.`id_order`, IF(co.id_guest, 1, 0) id_guest
		FROM `'._DB_PREFIX_.'cart` a
		LEFT JOIN `'._DB_PREFIX_.'customer` c ON (c.`id_customer` = a.`id_customer`)
		LEFT JOIN `'._DB_PREFIX_.'currency` cu ON (cu.`id_currency` = a.`id_currency`)
		LEFT JOIN `'._DB_PREFIX_.'carrier` ca ON (ca.`id_carrier` = a.`id_carrier`)
		LEFT JOIN `'._DB_PREFIX_.'orders` o ON (o.`id_cart` = a.`id_cart`)
		LEFT JOIN `'._DB_PREFIX_.'connections` co ON (a.`id_guest` = co.`id_guest` AND TIME_TO_SEC(TIMEDIFF(NOW(), co.`date_add`)) < 1800)
		WHERE a.`id_customer` > 0 AND o.`id_order` IS NULL
		'.($email != '' ? 'AND c.`email` LIKE \'%'.pSQL($email).'%\'' : '').'
		ORDER BY a.`date_add` DESC
		LIMIT '.(int)$limit);

		foreach ($carts_list as $kc => $vc)
			$carts_list[$kc]['total'] = Cart::getOrderTotalUsingTaxCalculationMethod($vc['id_cart']);

		return $carts_list;
	}

	public function getAvailablePaymentMethods()
	{
		return Db::getInstance()->executeS('
		SELECT DISTINCT(`payment`)
		FROM `'._DB_PREFIX_.'orders`');
	}
}



class FroggyCartOrderPaymentModule extends PaymentModule
{
	// Fix for validateOrder
	public $active = 1;
}